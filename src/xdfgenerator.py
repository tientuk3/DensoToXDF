from datetime import datetime

def luku(p1):
    return int.from_bytes(p1, byteorder="big", signed=False)

print("Denso SuperH firmware to TunerPro XDF converter")
print("by tientuk3 2021")
filename = input("Enter filename of the firmware image: ")
address_input = input("Enter offset of the lookup table in hex without prefix or suffix: ")
lookup_startAddress = int(address_input, 16)
f = open(filename, "rb")
f_out = open(filename[:-4] + "_definition.xdf", "x")
f.seek(lookup_startAddress)

tavu = f.read(1) # identifier byte for a map
n_2d = 0
n_3d = 0
n = 1
lines = 0

f_out.write("<!-- Written on " + str(datetime.now()) + " by tientuk3 Denso SuperH XDF generator -->\n")
f_out.writelines([  "<XDFFORMAT version=\"1.70\">\n"
                    "  <XDFHEADER>\n",
                    "    <flags>0x1</flags>\n",
                    "    <description>Autogenerated by tientuk3 Denso SuperH XDF generator</description>\n",
                    "    <BASEOFFSET offset=\"0\" subtract=\"0\" />\n",
                    "    <DEFAULTS datasizeinbits=\"8\" sigdigits=\"2\" outputtype=\"1\" signed=\"0\" lsbfirst=\"0\" float=\"0\" />\n",
                    "    <REGION type=\"0xFFFFFFFF\" startaddress=\"0x0\" size=\"0x40000\" regionflags=\"0x0\" name=\"Binary File\" desc=\"This region describes the bin file edited by this XDF\" />\n",
                    "  </XDFHEADER>\n"
                ] )

while luku(tavu) < 43: # byte actually says there's a map here -> write a table definition

    type3d = (luku(tavu) > 15)

    x_length = luku(f.read(1)) # x axis size
    x_format = "16" if (luku(tavu) & 1) else "8"

    if type3d:
        y_length = luku(f.read(1))
        y_format = "16" if (luku(tavu) & (1 << 3)) else "8"
    else:
        f.read(1) # y axis size or skip a byte
        y_length = 1

    f.read(1) # skip a byte

    x_address = "0x" + f.read(4).hex() # offset of x axis data
    if type3d: y_address = "0x" + f.read(4).hex() # offset of y axis data
    z_address = "0x" + f.read(4).hex() # offset of actual table data
    z_format = "16" if (luku(tavu) & (1 << 15)) else "8"
    f.read(4) # 4 empty bytes here
    tavu = f.read(1)

    if type3d:
        f_out.writelines([  "  <XDFTABLE uniqueid=\"0x%d\" flags=\"0x0\">\n" % (n),
                            "    <title>3D map x%dy%d at %s</title>\n" % (x_length, y_length, z_address),
                            "    <XDFAXIS id=\"x\" uniqueid=\"0x0\">\n",
                            "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedcolcount=\"%d\" mmedmajorstridebits=\"%s\" mmedminorstridebits=\"0\" />\n" % (x_address, x_format, x_length, x_format),
                            "      <indexcount>%d</indexcount>\n" % (x_length),
                            "      <embedinfo type=\"1\" />\n",
                            "      <datatype>0</datatype>\n",
                            "      <unittype>0</unittype>\n",
                            "      <DALINK index=\"0\" />\n",
                            "      <MATH equation=\"X\">\n",
                            "        <VAR id=\"X\" />\n",
                            "      </MATH>\n",
                            "    </XDFAXIS>\n"
                        ])
        f_out.writelines([  "    <XDFAXIS id=\"y\" uniqueid=\"0x0\">\n",
                            "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedcolcount=\"%d\" mmedmajorstridebits=\"%s\" mmedminorstridebits=\"0\" />\n" % (y_address, y_format, y_length, y_format),
                            "      <indexcount>%d</indexcount>\n" % (y_length),
                            "      <embedinfo type=\"1\" />\n",
                            "      <datatype>0</datatype>\n",
                            "      <unittype>0</unittype>\n",
                            "      <DALINK index=\"0\" />\n",
                            "      <MATH equation=\"X\">\n",
                            "        <VAR id=\"X\" />\n",
                            "      </MATH>\n",
                            "    </XDFAXIS>\n"
                        ])
        n_3d += 1

    else:
        f_out.writelines([  "  <XDFTABLE uniqueid=\"0x%d\" flags=\"0x0\">\n" % (n),
                            "    <title>2D map x%d at %s</title>\n" % (x_length, z_address),
                            "    <XDFAXIS id=\"x\" uniqueid=\"0x0\">\n",
                            "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedcolcount=\"%d\" mmedmajorstridebits=\"%s\" mmedminorstridebits=\"0\" />\n" % (x_address, x_format, x_length, x_format),
                            "      <indexcount>%d</indexcount>\n" % (x_length),
                            "      <embedinfo type=\"1\" />\n",
                            "      <datatype>0</datatype>\n",
                            "      <unittype>0</unittype>\n",
                            "      <DALINK index=\"0\" />\n",
                            "      <MATH equation=\"X\">\n",
                            "        <VAR id=\"X\" />\n",
                            "      </MATH>\n",
                            "    </XDFAXIS>\n"
                        ])
        f_out.writelines([  "    <XDFAXIS id=\"y\" uniqueid=\"0x0\">\n",
                            "      <EMBEDDEDDATA mmedelementsizebits=\"8\" mmedmajorstridebits=\"-32\" mmedminorstridebits=\"0\" />\n",
                            "      <indexcount>1</indexcount>\n",
                            "      <embedinfo type=\"1\" />\n",
                            "      <datatype>0</datatype>\n",
                            "      <unittype>0</unittype>\n",
                            "      <DALINK index=\"0\" />\n",
                            "      <LABEL index=\"0\" value=\"0.00\" />\n",
                            "      <MATH equation=\"X\">\n",
                            "        <VAR id=\"X\" />\n",
                            "      </MATH>\n",
                            "    </XDFAXIS>\n"
                        ])
        n_2d += 1
        lines += 1
    
    f_out.writelines([  "    <XDFAXIS id=\"z\">\n",
                        "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedrowcount=\"%d\" mmedcolcount=\"%d\" mmedmajorstridebits=\"0\" />\n" % (z_address, z_format, y_length, x_length),
                        "      <decimalpl>2</decimalpl>\n",
                        "      <min>0.000000</min>\n",
                        "      <max>5000.000000</max>\n",
                        "      <outputtype>2</outputtype>\n",
                        "      <MATH equation=\"X\">\n",
                        "        <VAR id=\"X\" />\n",
                        "      </MATH>\n",
                        "    </XDFAXIS>\n",
                        "  </XDFTABLE>\n"
                        ])
    
    n += 1
    lines += 35

f_out.write("</XDFFORMAT>\n")
lines += 10

f_out.close()
f.close()

print("%d 2D maps and %d 3D maps identified" % (n_2d, n_3d))
print("Total %d lines written to %s_definition.xdf" % (lines, filename[:-4]))