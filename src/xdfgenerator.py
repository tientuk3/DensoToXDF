from datetime import datetime
import argparse

def generate_xdf(in_file: str, out_file: str, map_data_offset: int):
    def luku(p1):
        return int.from_bytes(p1, byteorder="big", signed=False)

    filename = in_file
    lookup_startAddress = map_data_offset
    f = open(filename, "rb")
    f_out = open(out_file, "w")
    f.seek(lookup_startAddress)

    tavu = f.read(1) # identifier byte for a map
    n_2d = 0
    n_3d = 0
    n = 1
    lines = 0

    f_out.write("<!-- Written on " + str(datetime.now()) + " by tientuk3 Denso SuperH XDF generator -->\n")
    f_out.writelines([  "<XDFFORMAT version=\"1.70\">\n"
                        "  <XDFHEADER>\n",
                        "    <flags>0x1</flags>\n",
                        "    <description>Autogenerated by tientuk3 Denso SuperH XDF generator</description>\n",
                        "    <BASEOFFSET offset=\"0\" subtract=\"0\" />\n",
                        "    <DEFAULTS datasizeinbits=\"8\" sigdigits=\"2\" outputtype=\"1\" signed=\"0\" lsbfirst=\"0\" float=\"0\" />\n",
                        "    <REGION type=\"0xFFFFFFFF\" startaddress=\"0x0\" size=\"0x40000\" regionflags=\"0x0\" name=\"Binary File\" desc=\"This region describes the bin file edited by this XDF\" />\n",
                        "  </XDFHEADER>\n"
                    ] )

    while luku(tavu) < 0x2b: # byte actually says there's a map here -> write a table definition

        type3d = (luku(tavu) > 0xF)

        x_length = luku(f.read(1)) # x axis size
        x_format = "8" if ((luku(tavu) & (1 << 2)) != 0) else "16"

        if type3d: 
            y_length = luku(f.read(1))
            y_format = "8" if ((luku(tavu) & (1 << 4)) != 0) else "16"
        else:
            f.read(1)
            y_length = 1

        f.read(1) # skip a byte

        x_address = "0x" + f.read(4).hex() # offset of x axis data
        if type3d: y_address = "0x" + f.read(4).hex() # offset of y axis data
        z_address = "0x" + f.read(4).hex() # offset of actual table data
        z_format = "8" if ((luku(tavu) & 1) != 0) else "16"
        f.read(4) # 4 empty bytes here
        tavu = f.read(1)

        if type3d:
            f_out.writelines([  "  <XDFTABLE uniqueid=\"0x%d\" flags=\"0x0\">\n" % (n),
                                "    <title>3D map x%dy%d at %s</title>\n" % (x_length, y_length, z_address),
                                "    <XDFAXIS id=\"x\" uniqueid=\"0x0\">\n",
                                "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedcolcount=\"%d\" mmedmajorstridebits=\"%s\" mmedminorstridebits=\"0\" />\n" % (x_address, x_format, x_length, x_format),
                                "      <indexcount>%d</indexcount>\n" % (x_length),
                                "      <embedinfo type=\"1\" />\n",
                                "      <datatype>0</datatype>\n",
                                "      <unittype>0</unittype>\n",
                                "      <DALINK index=\"0\" />\n",
                                "      <MATH equation=\"X\">\n",
                                "        <VAR id=\"X\" />\n",
                                "      </MATH>\n",
                                "    </XDFAXIS>\n"
                            ])
            f_out.writelines([  "    <XDFAXIS id=\"y\" uniqueid=\"0x0\">\n",
                                "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedcolcount=\"%d\" mmedmajorstridebits=\"%s\" mmedminorstridebits=\"0\" />\n" % (y_address, y_format, y_length, y_format),
                                "      <indexcount>%d</indexcount>\n" % (y_length),
                                "      <embedinfo type=\"1\" />\n",
                                "      <datatype>0</datatype>\n",
                                "      <unittype>0</unittype>\n",
                                "      <DALINK index=\"0\" />\n",
                                "      <MATH equation=\"X\">\n",
                                "        <VAR id=\"X\" />\n",
                                "      </MATH>\n",
                                "    </XDFAXIS>\n"
                            ])
            n_3d += 1

        else:
            f_out.writelines([  "  <XDFTABLE uniqueid=\"0x%d\" flags=\"0x0\">\n" % (n),
                                "    <title>2D map x%d at %s</title>\n" % (x_length, z_address),
                                "    <XDFAXIS id=\"x\" uniqueid=\"0x0\">\n",
                                "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedcolcount=\"%d\" mmedmajorstridebits=\"%s\" mmedminorstridebits=\"0\" />\n" % (x_address, x_format, x_length, x_format),
                                "      <indexcount>%d</indexcount>\n" % (x_length),
                                "      <embedinfo type=\"1\" />\n",
                                "      <datatype>0</datatype>\n",
                                "      <unittype>0</unittype>\n",
                                "      <DALINK index=\"0\" />\n",
                                "      <MATH equation=\"X\">\n",
                                "        <VAR id=\"X\" />\n",
                                "      </MATH>\n",
                                "    </XDFAXIS>\n"
                            ])
            f_out.writelines([  "    <XDFAXIS id=\"y\" uniqueid=\"0x0\">\n",
                                "      <EMBEDDEDDATA mmedelementsizebits=\"8\" mmedmajorstridebits=\"-32\" mmedminorstridebits=\"0\" />\n",
                                "      <indexcount>1</indexcount>\n",
                                "      <embedinfo type=\"1\" />\n",
                                "      <datatype>0</datatype>\n",
                                "      <unittype>0</unittype>\n",
                                "      <DALINK index=\"0\" />\n",
                                "      <LABEL index=\"0\" value=\"0.00\" />\n",
                                "      <MATH equation=\"X\">\n",
                                "        <VAR id=\"X\" />\n",
                                "      </MATH>\n",
                                "    </XDFAXIS>\n"
                            ])
            n_2d += 1
            lines += 1
        
        f_out.writelines([  "    <XDFAXIS id=\"z\">\n",
                            "      <EMBEDDEDDATA mmedaddress=\"%s\" mmedelementsizebits=\"%s\" mmedrowcount=\"%d\" mmedcolcount=\"%d\" mmedmajorstridebits=\"0\" />\n" % (z_address, z_format, y_length, x_length),
                            "      <decimalpl>2</decimalpl>\n",
                            "      <min>0.000000</min>\n",
                            "      <max>5000.000000</max>\n",
                            "      <outputtype>2</outputtype>\n",
                            "      <MATH equation=\"X\">\n",
                            "        <VAR id=\"X\" />\n",
                            "      </MATH>\n",
                            "    </XDFAXIS>\n",
                            "  </XDFTABLE>\n"
                            ])
        
        n += 1
        lines += 35

    f_out.write("</XDFFORMAT>\n")
    lines += 10

    f_out.close()
    f.close()

    print("%d 2D maps and %d 3D maps identified" % (n_2d, n_3d))
    print("Total %d lines written to %s_definition.xdf" % (lines, filename[:-4]))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate TunerPro XDF definition file from Denso SuperH/M32R ECU binaries')
    parser.add_argument('--position', required=True, type=lambda val: int(val, 16),
                        help='Hexadecimal offset of the start of the map data area')
    parser.add_argument('in_file', help='Input BIN file path')
    parser.add_argument('out_file', help='Output XDF file path')
    args = parser.parse_args()
    
    generate_xdf(args.in_file, args.out_file, args.position)